#!/usr/bin/env python3
"""
API –°–ï–†–í–ï–† –î–õ–Ø –°–ò–°–¢–ï–ú–´ –î–ï–¢–ï–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ê–¢–ê–ö
"""

import sys
import os
import json
import time
from datetime import datetime
from typing import Dict, Any, List, Optional

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –ü–£–¢–ï–ô –ò–ú–ü–û–†–¢–ê =====
current_dir = os.path.dirname(__file__)  # –ø–∞–ø–∫–∞ –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è server.py
src_path = os.path.abspath(os.path.join(current_dir, '..'))  # –ø–∞–ø–∫–∞ src
detector_path = os.path.abspath(os.path.join(current_dir, '..', '..'))  # –ø–∞–ø–∫–∞ detector

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
sys.path.insert(0, src_path)      # —Å–Ω–∞—á–∞–ª–∞ –ø–∞–ø–∫–∞ src
sys.path.insert(0, detector_path) # –ø–æ—Ç–æ–º –ø–∞–ø–∫–∞ detector

print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞:")
print(f"   –¢–µ–∫—É—â–∞—è –ø–∞–ø–∫–∞: {current_dir}")
print(f"   –ü–∞–ø–∫–∞ src: {src_path}")
print(f"   –ü–∞–ø–∫–∞ detector: {detector_path}")

# ===== –ò–ú–ü–û–†–¢ –í–ù–ï–®–ù–ò–• –ë–ò–ë–õ–ò–û–¢–ï–ö =====
try:
    from fastapi import FastAPI, HTTPException
    from pydantic import BaseModel
    HAS_FASTAPI = True
    print("‚úÖ FastAPI –∏ Pydantic —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
except ImportError as e:
    print(f"‚ö†Ô∏è  FastAPI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {e}")
    print("   –ó–∞–ø—É—Å–∫–∞–µ–º –≤ —É–ø—Ä–æ—â—ë–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    HAS_FASTAPI = False
    # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–∏–ø–æ–≤
    class BaseModel:
        pass

# ===== –ò–ú–ü–û–†–¢ –ù–ê–®–ï–ô –°–ò–°–¢–ï–ú–´ =====
try:
    # –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞
    from main import CyberRangeDetector
    print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–ø—Ä—è–º–æ–π –∏–º–ø–æ—Ä—Ç)!")
except ImportError as e:
    try:
        # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å
        from src.main import CyberRangeDetector
        print("‚úÖ –°–∏—Å—Ç–µ–º–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ (–∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É—Ç—å)!")
    except ImportError as e2:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e2}")
        print("–î–æ—Å—Ç—É–ø–Ω—ã–µ –ø—É—Ç–∏ –≤ sys.path:")
        for path in sys.path:
            print(f"   - {path}")
        sys.exit(1)

# ===== –ò–ù–ò–¶–ò–ê–õ–ò–ó–ê–¶–ò–Ø –î–ï–¢–ï–ö–¢–û–†–ê =====
detector = CyberRangeDetector()
print("üéØ –î–µ—Ç–µ–∫—Ç–æ—Ä –∞—Ç–∞–∫ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω!")

# ===== –•–†–ê–ù–ò–õ–ò–©–ï –°–û–ë–´–¢–ò–ô =====
events_storage = []
detected_attacks = []

# ===== FASTAPI –í–ï–†–°–ò–Ø =====
if HAS_FASTAPI:
    
    # –°–æ–∑–¥–∞—ë–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ FastAPI
    app = FastAPI(
        title="Cyber Range Detector API",
        description="API –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∞—Ç–∞–∫",
        version="1.0.0"
    )

    # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è API
    class LogData(BaseModel):
        method: str
        url: str
        params: Dict[str, Any]
        headers: Optional[Dict[str, str]] = None
        sandbox_id: str
        timestamp: Optional[str] = None

    class AnalysisRequest(BaseModel):
        logs: List[LogData]

    # === –ù–û–í–ê–Ø –ú–û–î–ï–õ–¨ –î–õ–Ø –°–û–ë–´–¢–ò–ô –û–¢ –î–ï–¢–ï–ö–¢–û–†–ê ===
    class SecurityEvent(BaseModel):
        """–ú–æ–¥–µ–ª—å –¥–ª—è –ø—Ä–∏–µ–º–∞ —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞"""
        timestamp: float
        event_type: str
        source_ip: str
        destination_ip: str
        description: str
        payload: str = None
        user_agent: str = None
        method: str = "GET"

    # ===== –≠–ù–î–ü–û–ò–ù–¢–´ API =====
    
    @app.get("/")
    async def root():
        """–ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞ API"""
        return {
            "message": "Cyber Range Detector API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            "version": "1.0.0",
            "mode": "full",
            "endpoints": {
                "analyze_single": "POST /api/analyze - –∞–Ω–∞–ª–∏–∑ –æ–¥–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞",
                "analyze_batch": "POST /api/analyze/batch - –∞–Ω–∞–ª–∏–∑ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤",
                "get_stats": "GET /api/stats - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏", 
                "get_recent": "GET /api/attacks/recent - –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∞—Ç–∞–∫–∏",
                "health": "GET /health - –ø—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è",
                "receive_events": "POST /api/events - –ø—Ä–∏–µ–º —Å–æ–±—ã—Ç–∏–π –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞",  # –ù–û–í–´–ô
                "get_events": "GET /api/events - –ø–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π"  # –ù–û–í–´–ô
            }
        }

    @app.get("/health")
    async def health_check():
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–µ—Ä–≤–∏—Å–∞"""
        return {
            "status": "healthy", 
            "service": "attack-detector",
            "detectors_loaded": True,
            "events_count": len(events_storage),  # –ù–û–í–û–ï
            "attacks_count": len(detected_attacks)  # –ù–û–í–û–ï
        }

    # === –ù–û–í–´–ï ENDPOINTS –î–õ–Ø –ü–†–ò–ï–ú–ê –°–û–ë–´–¢–ò–ô ===

    @app.post("/api/events")
    async def receive_event(event: SecurityEvent):
        """–ü—Ä–∏–Ω–∏–º–∞–µ—Ç —Å–æ–±—ã—Ç–∏—è –æ—Ç –¥–µ—Ç–µ–∫—Ç–æ—Ä–∞ –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–∞ –∞—Ç–∞–∫–∏"""
        try:
            print(f"üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–±—ã—Ç–∏–µ: {event.event_type} –æ—Ç {event.source_ip}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–±—ã—Ç–∏–µ
            event_data = event.dict()
            event_data["received_at"] = datetime.now().isoformat()
            event_data["event_id"] = f"event_{int(time.time())}_{len(events_storage)}"
            events_storage.append(event_data)
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞ –∞—Ç–∞–∫–∏ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
            is_attack = False
            attack_type = None
            
            # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
            if event.payload:
                payload_lower = event.payload.lower()
                if any(sql_keyword in payload_lower for sql_keyword in ['select', 'union', 'drop', 'insert', '1=1']):
                    is_attack = True
                    attack_type = "sql_injection"
                    print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SQL injection: {event.payload}")
                elif any(xss_keyword in payload_lower for xss_keyword in ['<script>', 'javascript:', 'onload=']):
                    is_attack = True
                    attack_type = "xss"
                    print(f"üö® –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ XSS –∞—Ç–∞–∫–∞: {event.payload}")
            
            # –ï—Å–ª–∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∞—Ç–∞–∫–∞, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–¥–µ–ª—å–Ω–æ
            if is_attack:
                attack_event = {
                    "event_id": f"attack_{int(time.time())}_{len(detected_attacks)}",
                    "timestamp": event.timestamp,
                    "attack_type": attack_type,
                    "source_ip": event.source_ip,
                    "destination_ip": event.destination_ip,
                    "description": event.description,
                    "payload": event.payload,
                    "detected_at": datetime.now().isoformat()
                }
                detected_attacks.append(attack_event)
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            response = {
                "success": True,
                "message": "–°–æ–±—ã—Ç–∏–µ –ø–æ–ª—É—á–µ–Ω–æ –∏ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ",
                "event_id": event_data["event_id"],
                "is_attack": is_attack,
                "attack_type": attack_type,
                "received_data": {
                    "event_type": event.event_type,
                    "source_ip": event.source_ip,
                    "destination_ip": event.destination_ip,
                    "description": event.description
                }
            }
            
            return response
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è: {str(e)}")

    @app.get("/api/events")
    async def get_events(limit: int = 10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è"""
        return {
            "success": True,
            "total_events": len(events_storage),
            "events": events_storage[-limit:] if events_storage else []
        }

    @app.get("/api/attacks")
    async def get_attacks(limit: int = 10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏"""
        return {
            "success": True,
            "total_attacks": len(detected_attacks),
            "attacks": detected_attacks[-limit:] if detected_attacks else []
        }

    # === –°–£–©–ï–°–¢–í–£–Æ–©–ò–ï ENDPOINTS ===

    @app.post("/api/analyze")
    async def analyze_single_request(log_data: LogData):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ–¥–∏–Ω HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –∞—Ç–∞–∫
        """
        try:
            print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {log_data.method} {log_data.url}")
            
            result = detector.analyze_request(
                method=log_data.method,
                url=log_data.url,
                params=log_data.params,
                headers=log_data.headers,
                sandbox_id=log_data.sandbox_id
            )
            
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {result['summary']['total_detections']} —É–≥—Ä–æ–∑")
            
            return {
                "success": True,
                "data": result,
                "sandbox_id": log_data.sandbox_id
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    @app.post("/api/analyze/batch")
    async def analyze_batch_requests(request: AnalysisRequest):
        """
        –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ HTTP –∑–∞–ø—Ä–æ—Å–æ–≤ –æ–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ
        """
        try:
            print(f"üîç –ü–∞–∫–µ—Ç–Ω—ã–π –∞–Ω–∞–ª–∏–∑: {len(request.logs)} –∑–∞–ø—Ä–æ—Å–æ–≤")
            
            results = []
            total_detections = 0
            
            for i, log_data in enumerate(request.logs):
                result = detector.analyze_request(
                    method=log_data.method,
                    url=log_data.url,
                    params=log_data.params,
                    headers=log_data.headers,
                    sandbox_id=log_data.sandbox_id
                )
                results.append(result)
                total_detections += result['summary']['total_detections']
                
                if i % 10 == 0:  # –õ–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–µ 10 –∑–∞–ø—Ä–æ—Å–æ–≤
                    print(f"   –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {i+1}/{len(request.logs)}")
            
            print(f"   –ò—Ç–æ–≥–æ: {total_detections} —É–≥—Ä–æ–∑ –≤ {len(results)} –∑–∞–ø—Ä–æ—Å–∞—Ö")
            
            return {
                "success": True,
                "total_requests": len(results),
                "total_detections": total_detections,
                "results": results
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞–∫–µ—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {str(e)}")

    @app.get("/api/stats")
    async def get_statistics():
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        try:
            memory_stats = detector.get_stats()
            db_stats = detector.get_database_stats()
            
            stats = {
                "success": True,
                "memory_stats": memory_stats,
                "database_stats": db_stats,
                "summary": {
                    "total_requests": db_stats['total_requests'],
                    "total_attacks": db_stats['detected_attacks'],
                    "attack_ratio": f"{(db_stats['detected_attacks'] / db_stats['total_requests'] * 100):.1f}%" if db_stats['total_requests'] > 0 else "0%",
                    "detectors": {
                        "sql_injection": db_stats['sql_injections'],
                        "xss": db_stats['xss_attacks'], 
                        "path_traversal": db_stats['path_traversals']
                    }
                },
                "events_stats": {  # –ù–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê
                    "total_events": len(events_storage),
                    "detected_attacks": len(detected_attacks),
                    "events_attack_ratio": f"{(len(detected_attacks) / len(events_storage) * 100):.1f}%" if events_storage else "0%"
                }
            }
            
            print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞–ø—Ä–æ—à–µ–Ω–∞: {db_stats['total_requests']} –∑–∞–ø—Ä–æ—Å–æ–≤, {len(events_storage)} —Å–æ–±—ã—Ç–∏–π")
            return stats
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {str(e)}")

    @app.get("/api/attacks/recent")
    async def get_recent_attacks(limit: int = 10):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏"""
        try:
            recent_attacks = detector.get_recent_detections(limit)
            
            print(f"üïí –ó–∞–ø—Ä–æ—à–µ–Ω—ã –ø–æ—Å–ª–µ–¥–Ω–∏–µ {len(recent_attacks)} –∞—Ç–∞–∫")
            
            return {
                "success": True,
                "limit": limit,
                "total": len(recent_attacks),
                "attacks": recent_attacks
            }
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç–∞–∫: {e}")
            raise HTTPException(status_code=500, detail=f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞—Ç–∞–∫: {str(e)}")

# ===== –£–ü–†–û–©–Å–ù–ù–ê–Ø –í–ï–†–°–ò–Ø (–ë–ï–ó FASTAPI) =====
else:
    from http.server import HTTPServer, BaseHTTPRequestHandler
    import urllib.parse
    
    class APIHandler(BaseHTTPRequestHandler):
        
        def _send_json_response(self, code, data):
            """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç JSON –æ—Ç–≤–µ—Ç"""
            self.send_response(code)
            self.send_header('Content-type', 'application/json')
            self.end_headers()
            self.wfile.write(json.dumps(data, ensure_ascii=False).encode('utf-8'))
        
        def _parse_query_params(self, path):
            """–ü–∞—Ä—Å–∏—Ç –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞ –∏–∑ URL"""
            if '?' in path:
                query_string = path.split('?', 1)[1]
                return dict(urllib.parse.parse_qsl(query_string))
            return {}
        
        def do_GET(self):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç GET –∑–∞–ø—Ä–æ—Å—ã"""
            path = self.path.split('?')[0]  # –£–±–∏—Ä–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã
            
            if path == '/health':
                self._send_json_response(200, {
                    "status": "healthy", 
                    "service": "attack-detector",
                    "mode": "simple"
                })
            
            elif path == '/':
                self._send_json_response(200, {
                    "message": "Cyber Range Detector API —Ä–∞–±–æ—Ç–∞–µ—Ç!",
                    "version": "1.0.0", 
                    "mode": "simple",
                    "endpoints": ["/health", "/api/stats", "POST /api/analyze"]
                })
            
            elif path == '/api/stats':
                try:
                    memory_stats = detector.get_stats()
                    db_stats = detector.get_database_stats()
                    self._send_json_response(200, {
                        "success": True,
                        "memory_stats": memory_stats,
                        "database_stats": db_stats
                    })
                except Exception as e:
                    self._send_json_response(500, {"error": str(e)})
            
            elif path == '/api/attacks/recent':
                try:
                    params = self._parse_query_params(self.path)
                    limit = int(params.get('limit', 10))
                    recent_attacks = detector.get_recent_detections(limit)
                    self._send_json_response(200, {
                        "success": True,
                        "attacks": recent_attacks
                    })
                except Exception as e:
                    self._send_json_response(500, {"error": str(e)})
            
            else:
                self._send_json_response(404, {"error": f"Endpoint {path} not found"})
        
        def do_POST(self):
            """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç POST –∑–∞–ø—Ä–æ—Å—ã"""
            path = self.path
            
            if path == '/api/analyze':
                content_length = int(self.headers['Content-Length'])
                post_data = self.rfile.read(content_length)
                
                try:
                    data = json.loads(post_data.decode('utf-8'))
                    print(f"üîç –ê–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞: {data.get('method')} {data.get('url')}")
                    
                    result = detector.analyze_request(
                        method=data['method'],
                        url=data['url'],
                        params=data['params'],
                        headers=data.get('headers', {}),
                        sandbox_id=data.get('sandbox_id', 'unknown')
                    )
                    
                    self._send_json_response(200, {
                        "success": True,
                        "data": result
                    })
                    
                except Exception as e:
                    print(f"‚ùå –û—à–∏–±–∫–∞ –∞–Ω–∞–ª–∏–∑–∞: {e}")
                    self._send_json_response(400, {"error": str(e)})
            
            else:
                self._send_json_response(404, {"error": f"Endpoint {path} not found"})
        
        def log_message(self, format, *args):
            """–û—Ç–∫–ª—é—á–∞–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ"""
            pass

    app = None

# ===== –ó–ê–ü–£–°–ö –°–ï–†–í–ï–†–ê =====
def run_server():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫"""
    if HAS_FASTAPI:
        import uvicorn
        print("\n" + "="*50)
        print("üöÄ –ó–ê–ü–£–°–ö –ü–û–õ–ù–û–¶–ï–ù–ù–û–ì–û API –°–ï–†–í–ï–†–ê")
        print("="*50)
        print("üìç –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: http://localhost:8001/docs")
        print("üìç –ì–ª–∞–≤–Ω–∞—è: http://localhost:8001/")
        print("üìç –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8001/health")
        print("üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:8001/api/stats")
        print("üìç –°–æ–±—ã—Ç–∏—è: http://localhost:8001/api/events")  # –ù–û–í–û–ï
        print("üìç –ê—Ç–∞–∫–∏: http://localhost:8001/api/attacks")   # –ù–û–í–û–ï
        print("="*50)
        uvicorn.run(app, host="0.0.0.0", port=8001, log_level="info")
    else:
        print("\n" + "="*50)
        print("üöÄ –ó–ê–ü–£–°–ö –£–ü–†–û–©–Å–ù–ù–û–ì–û HTTP –°–ï–†–í–ï–†–ê")
        print("="*50)
        print("üìç –ì–ª–∞–≤–Ω–∞—è: http://localhost:8001/")
        print("üìç –ó–¥–æ—Ä–æ–≤—å–µ: http://localhost:8001/health")
        print("üìç –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: http://localhost:8001/api/stats")
        print("üìç –ê–Ω–∞–ª–∏–∑: POST http://localhost:8001/api/analyze")
        print("="*50)
        server = HTTPServer(('0.0.0.0', 8001), APIHandler)
        try:
            server.serve_forever()
        except KeyboardInterrupt:
            print("\nüõë –°–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    run_server()