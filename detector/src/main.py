#!/usr/bin/env python3
"""
–ì–õ–ê–í–ù–´–ô –ú–û–î–£–õ–¨ –°–ò–°–¢–ï–ú–´ –î–ï–¢–ï–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ê–¢–ê–ö
"""

# –ü–†–ê–í–ò–õ–¨–ù–´–ï –ò–ú–ü–û–†–¢–´
from detectors.sql_injection import SQLInjectionDetector
from detectors.xss_detector import XSSDetector
from detectors.path_traversal import PathTraversalDetector
from database.db_manager import DatabaseManager

from typing import Dict, Any, List
import json

class CyberRangeDetector:
    """–û—Å–Ω–æ–≤–Ω–æ–π –∫–ª–∞—Å—Å —Å–∏—Å—Ç–µ–º—ã –¥–µ—Ç–µ–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    
    def __init__(self):
        self.sql_detector = SQLInjectionDetector()
        self.xss_detector = XSSDetector()
        self.path_traversal_detector = PathTraversalDetector()
        self.db_manager = DatabaseManager()
        
        self.stats = {
            'total_requests': 0,
            'detected_attacks': 0,
            'sql_injections': 0,
            'xss_attacks': 0,
            'path_traversals': 0
        }
    
    def analyze_request(self, method: str, url: str, params: Dict[str, Any], headers: Dict[str, str] = None, sandbox_id: str = None) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç HTTP –∑–∞–ø—Ä–æ—Å –Ω–∞ —Ä–∞–∑–ª–∏—á–Ω—ã–µ –∞—Ç–∞–∫–∏"""
        self.stats['total_requests'] += 1
        
        all_detections = []
        
        # –ê–Ω–∞–ª–∏–∑ SQL-–∏–Ω—ä–µ–∫—Ü–∏–π
        sql_detections = self.sql_detector.analyze_http_request(method, url, params)
        all_detections.extend(sql_detections)
        
        # –ê–Ω–∞–ª–∏–∑ XSS
        for param_name, param_value in params.items():
            if isinstance(param_value, str):
                xss_detections = self.xss_detector.detect(param_value)
                for detection in xss_detections:
                    detection['location'] = f'PARAM_{param_name}'
                    all_detections.append(detection)
        
        # –ê–Ω–∞–ª–∏–∑ URL –Ω–∞ XSS
        xss_url_detections = self.xss_detector.detect(url)
        for detection in xss_url_detections:
            detection['location'] = 'URL'
            all_detections.append(detection)
        
        # –ê–Ω–∞–ª–∏–∑ Path Traversal
        for param_name, param_value in params.items():
            if isinstance(param_value, str):
                path_detections = self.path_traversal_detector.detect(param_value)
                for detection in path_detections:
                    detection['location'] = f'PARAM_{param_name}'
                    all_detections.append(detection)
        
        path_url_detections = self.path_traversal_detector.detect(url)
        for detection in path_url_detections:
            detection['location'] = 'URL'
            all_detections.append(detection)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∏ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        request_id = self.db_manager.save_request(method, url, params, sandbox_id)
        if all_detections:
            self.db_manager.save_detections(request_id, all_detections)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –±–∞–∑–µ
        self.db_manager.update_statistics({
            'total_requests': 1,
            'detected_attacks': 1 if all_detections else 0,
            'sql_injections': len([d for d in all_detections if d['type'] == 'SQL_INJECTION']),
            'xss_attacks': len([d for d in all_detections if d['type'] == 'XSS']),
            'path_traversals': len([d for d in all_detections if d['type'] == 'PATH_TRAVERSAL'])
        })
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –≤ –ø–∞–º—è—Ç–∏
        if all_detections:
            self.stats['detected_attacks'] += 1
            self.stats['sql_injections'] += len([d for d in all_detections if d['type'] == 'SQL_INJECTION'])
            self.stats['xss_attacks'] += len([d for d in all_detections if d['type'] == 'XSS'])
            self.stats['path_traversals'] += len([d for d in all_detections if d['type'] == 'PATH_TRAVERSAL'])
        
        return {
            'request_info': {
                'method': method,
                'url': url,
                'params_count': len(params),
                'request_id': request_id
            },
            'detections': all_detections,
            'summary': {
                'total_detections': len(all_detections),
                'risk_level': self._calculate_risk_level(all_detections),
                'recommendation': self._get_recommendation(all_detections)
            }
        }
    
    def _calculate_risk_level(self, detections: List[Dict[str, Any]]) -> str:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–±—â–∏–π —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞"""
        if not detections:
            return 'LOW'
        
        risk_scores = {'CRITICAL': 4, 'HIGH': 3, 'MEDIUM': 2, 'LOW': 1}
        max_risk = max([risk_scores.get(d['risk_level'], 0) for d in detections])
        
        if max_risk >= 4:
            return 'CRITICAL'
        elif max_risk >= 3:
            return 'HIGH'
        elif max_risk >= 2:
            return 'MEDIUM'
        else:
            return 'LOW'
    
    def _get_recommendation(self, detections: List[Dict[str, Any]]) -> str:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
        if not detections:
            return "–ó–∞–ø—Ä–æ—Å –±–µ–∑–æ–ø–∞—Å–µ–Ω"
        
        attack_types = set([d['type'] for d in detections])
        
        recommendations = []
        if 'SQL_INJECTION' in attack_types:
            recommendations.append("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏–∑–æ–≤–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç SQL-–∏–Ω—ä–µ–∫—Ü–∏–π")
        if 'XSS' in attack_types:
            recommendations.append("–ü—Ä–∏–º–µ–Ω—è–π—Ç–µ —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–≤–æ–¥–∞ –¥–ª—è –∑–∞—â–∏—Ç—ã –æ—Ç XSS")
        if 'PATH_TRAVERSAL' in attack_types:
            recommendations.append("–í–∞–ª–∏–¥–∏—Ä—É–π—Ç–µ –≤—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∞–π–ª–æ–≤—ã—Ö –ø—É—Ç–µ–π")
        
        return "; ".join(recommendations)
    
    def get_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
        return self.stats
    
    def get_database_stats(self) -> Dict[str, Any]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.db_manager.get_daily_stats()
    
    def get_recent_detections(self, limit: int = 5) -> List[Dict[str, Any]]:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –ø–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–µ –∞—Ç–∞–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        return self.db_manager.get_recent_detections(limit)

# –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –°–ò–°–¢–ï–ú–´
def main():
    print("üîç –ó–ê–ü–£–°–ö –°–ò–°–¢–ï–ú–´ –î–ï–¢–ï–ö–¢–ò–†–û–í–ê–ù–ò–Ø –ê–¢–ê–ö")
    print("=" * 60)
    
    detector = CyberRangeDetector()
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_requests = [
        {
            'method': 'GET',
            'url': '/search',
            'params': {'q': "apple"},
            'sandbox_id': 'sandbox_001'
        },
        {
            'method': 'GET', 
            'url': '/login',
            'params': {'username': "admin' OR 1=1--", 'password': "123"},
            'sandbox_id': 'sandbox_001'
        },
        {
            'method': 'POST',
            'url': '/comment',
            'params': {'text': "<script>alert('XSS')</script>"},
            'sandbox_id': 'sandbox_002'
        },
        {
            'method': 'GET',
            'url': '/user?id=1; DROP TABLE users--',
            'params': {},
            'sandbox_id': 'sandbox_001'
        },
        {
            'method': 'GET',
            'url': '/download',
            'params': {'file': "../../etc/passwd"},
            'sandbox_id': 'sandbox_003'
        }
    ]
    
    for i, request in enumerate(test_requests, 1):
        print(f"\nüì® –¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–° #{i}:")
        print(f"   –ú–µ—Ç–æ–¥: {request['method']}")
        print(f"   URL: {request['url']}")
        print(f"   –ü–∞—Ä–∞–º–µ—Ç—Ä—ã: {request['params']}")
        print(f"   Sandbox ID: {request['sandbox_id']}")
        
        result = detector.analyze_request(**request)
        
        print(f"\n   üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"   ID –∑–∞–ø—Ä–æ—Å–∞: {result['request_info']['request_id']}")
        print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {result['summary']['risk_level']}")
        print(f"   –û–±–Ω–∞—Ä—É–∂–µ–Ω–æ —É–≥—Ä–æ–∑: {result['summary']['total_detections']}")
        print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: {result['summary']['recommendation']}")
        
        if result['detections']:
            print(f"\n   üö® –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ê–¢–ê–ö–ò:")
            for detection in result['detections']:
                print(f"     - {detection['type']} ({detection.get('subtype', 'DIRECT')})")
                print(f"       –†–∏—Å–∫: {detection['risk_level']} | –õ–æ–∫–∞—Ü–∏—è: {detection['location']}")
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –ø–∞–º—è—Ç–∏
    print("\n" + "=" * 60)
    print("üìà –°–¢–ê–¢–ò–°–¢–ò–ö–ê –†–ê–ë–û–¢–´ –°–ò–°–¢–ï–ú–´ (–≤ –ø–∞–º—è—Ç–∏):")
    stats = detector.get_stats()
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {stats['total_requests']}")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å –∞—Ç–∞–∫–∞–º–∏: {stats['detected_attacks']}")
    print(f"   SQL-–∏–Ω—ä–µ–∫—Ü–∏–π: {stats['sql_injections']}")
    print(f"   XSS –∞—Ç–∞–∫: {stats['xss_attacks']}")
    print(f"   Path Traversal –∞—Ç–∞–∫: {stats['path_traversals']}")
    
    # –í—ã–≤–æ–¥ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    print("\nüìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ò–ó –ë–ê–ó–´ –î–ê–ù–ù–´–• (–∑–∞ —Å–µ–≥–æ–¥–Ω—è):")
    db_stats = detector.get_database_stats()
    print(f"   –í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤: {db_stats['total_requests']}")
    print(f"   –ó–∞–ø—Ä–æ—Å–æ–≤ —Å –∞—Ç–∞–∫–∞–º–∏: {db_stats['detected_attacks']}")
    print(f"   SQL-–∏–Ω—ä–µ–∫—Ü–∏–π: {db_stats['sql_injections']}")
    print(f"   XSS –∞—Ç–∞–∫: {db_stats['xss_attacks']}")
    print(f"   Path Traversal –∞—Ç–∞–∫: {db_stats['path_traversals']}")
    
    # –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏–π –∏–∑ –±–∞–∑—ã
    print("\nüïí –ü–û–°–õ–ï–î–ù–ò–ï –û–ë–ù–ê–†–£–ñ–ï–ù–ù–´–ï –ê–¢–ê–ö–ò:")
    recent_detections = detector.get_recent_detections(3)
    for detection in recent_detections:
        print(f"   - {detection['method']} {detection['url']}")
        print(f"     {detection['type']} ({detection['subtype']}) | –†–∏—Å–∫: {detection['risk_level']}")
    
    print("=" * 60)

if __name__ == "__main__":
    main()